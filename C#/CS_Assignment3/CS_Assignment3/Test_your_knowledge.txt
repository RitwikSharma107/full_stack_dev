C# Assignment-1

### Test your Knowledge ###

1. What are the six combinations of access modifier keywords and what do they do?
   - public: The member is accessible from any other code.
   - private: The member is accessible only within its own class.
   - protected: The member is accessible within its own class and by derived class instances.
   - internal: The member is accessible only within files in the same assembly.
   - protected internal: The member is accessible within its own assembly or to derived classes.
   - private protected: The member is accessible within its containing class or derived classes in the same assembly.

2. What is the difference between the static, const, and readonly keywords when applied to a type member?
   - static: Indicates that the member belongs to the type itself rather than to a specific object. It is shared among all instances.
   - const: Indicates that the value is constant and can’t be changed. It is evaluated at compile-time.
   - readonly: Indicates that the value can be assigned only during initialization or in a constructor. It is evaluated at runtime.

3. What does a constructor do?
   - A constructor initializes a new instance of a class. It sets default values and performs any setup required when an object is created.

4. Why is the partial keyword useful?
   - The partial keyword allows a class, struct, or interface to be split into multiple files. This can make managing large classes more convenient, allowing code to be divided logically.

5. What is a tuple?
   - A tuple is a data structure that can hold multiple values of different types. Tuples are useful for returning multiple values from a method.

6. What does the C# record keyword do?
   - The record keyword defines a reference type that provides built-in functionality for value equality. Records are immutable by default and are primarily used for modeling data.

7. What does overloading and overriding mean?
   - Overloading: Defining multiple methods with the same name but different parameters within the same class.
   - Overriding: Providing a new implementation for a method inherited from a base class using the override keyword.

8. What is the difference between a field and a property?
   - A field is a variable declared directly in a class or struct.
   - A property provides a flexible mechanism to read, write, or compute the value of a private field and can include logic in the getters and setters.

9. How do you make a method parameter optional?
   - You can make a method parameter optional by providing a default value in the method signature:
     ```csharp
     public void MyMethod(int x = 0) { }
     ```

10. What is an interface and how is it different from an abstract class?
    - An interface defines a contract with method signatures but no implementation. A class can implement multiple interfaces.
    - An abstract class can contain both abstract methods (without implementation) and concrete methods (with implementation). A class can inherit from only one abstract class.

11. What accessibility level are members of an interface?
    - All members of an interface are implicitly public.

12. True/False: Polymorphism allows derived classes to provide different implementations of the same method.
    - True

13. True/False: The override keyword is used to indicate that a method in a derived class is providing its own implementation of a method.
    - True

14. True/False: The new keyword is used to indicate that a method in a derived class is providing its own implementation of a method.
    - True (When hiding a method in the base class)

15. True/False: Abstract methods can be used in a normal (non-abstract) class.
    - False

16. True/False: Normal (non-abstract) methods can be used in an abstract class.
    - True

17. True/False: Derived classes can override methods that were virtual in the base class.
    - True

18. True/False: Derived classes can override methods that were abstract in the base class.
    - True

19. True/False: In a derived class, you can override a method that was neither virtual nor abstract in the base class.
    - False

20. True/False: A class that implements an interface does not have to provide an implementation for all of the members of the interface.
    - False

21. True/False: A class that implements an interface is allowed to have other members that aren’t defined in the interface.
    - True

22. True/False: A class can have more than one base class.
    - False

23. True/False: A class can implement more than one interface.
    - True